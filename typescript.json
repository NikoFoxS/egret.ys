{
	/*
	 // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"public bitmap": {
		"prefix": "ysPublicBitmap",
		"body":[
			"public bm_$1:ys.Bitmap=null;"
		]
	},
	"public textfield": {
		"prefix": "ysPublicTextFiled",
		"body":[
			"public txt_$1:ys.TextFiled=null;"
		]
	},
	"public shape": {
		"prefix": "ysPublicShape",
		"body":[
			"public shape_$1:ys.Shape=null;"
		]
	},
	"public container": {
		"prefix": "ysPublicContainer",
		"body":[
			"public con_$1:ys.Container=null;"
		]
	},
	"page": {
		"prefix": "ysView",
		"body":[
			"namespace app{",
			"	/**界面$1*/",
			"	export class $1 extends ys.View",
			"	{",
			"		constructor()",
			"		{",
			"			super('$2');",
			"		}",

			"		OnStart()",
			"		{",
			"			this.create(this, () => {",
			"				this.OnReay();",
			"				this.addMediator($1Mediator);",
			"			}, this);",
			"		}",
			"		OnReay()",
			"		{",
			"			$0",
			"		}",
			"	}",
			"",
			"	/**界面管理器*/",
			"	export class $1Mediator extends ys.mvc.Mediator",
			"	{",
			"		constructor()",
			"		{",
			"			super();",
			"		}",
			"		private v:$1;",
			"		/**当被安装*/",
			"		Install(): void {",
			"			this.v = this.GetView<$1>();",	
			"			//添加界面管理逻辑",
			"		}",
			"		/**当被卸载*/",
			"		Uninstall(): void {",
			"		}",
			"		/**列出需要关注的invoke */",
			"		ListInvoke(): any[] {",
			"			return [];",
			"		}",
			"		/**处理invoke*/",
			"		OnInvoke(handler: number | string, data: any): void {",
			"		}",
			"	}",
			"}"
		]
	}
	

}